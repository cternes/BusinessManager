package ch.vqf.cp.domain.security;

import java.util.Calendar;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToOne;

import org.hibernate.validator.constraints.NotEmpty;

import ch.vqf.cp.domain.AbstractEntity;

/**
 * @author Christian Ternes
 *
 */
@Entity
public final class ResetPasswordToken extends AbstractEntity {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@Column
	@NotEmpty
	private String token;
	
	@OneToOne
	private User user;
	
	ResetPasswordToken() {
	}
	
	public ResetPasswordToken(String token, User user, Calendar validUntil) {
		this.token = token;
		this.user = user;
		setValidUntil(validUntil);
	}

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public String getToken() {
		return token;
	}

	public void setToken(String token) {
		this.token = token;
	}

	public User getUser() {
		return user;
	}

	public void setUser(User user) {
		this.user = user;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + (id == null ? 0 : id.hashCode());
		result = prime * result + (token == null ? 0 : token.hashCode());
		result = prime * result + (user == null ? 0 : user.hashCode());
		result = prime * result + (getValidUntil() == null ? 0 : getValidUntil().hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		ResetPasswordToken other = (ResetPasswordToken) obj;
		if (id == null) {
			if (other.id != null) {
				return false;
			}
		}
		else if (!id.equals(other.id)) {
			return false;
		}
		if (token == null) {
			if (other.token != null) {
				return false;
			}
		}
		else if (!token.equals(other.token)) {
			return false;
		}
		if (user == null) {
			if (other.user != null) {
				return false;
			}
		}
		else if (!user.equals(other.user)) {
			return false;
		}
		if (getValidUntil() == null) {
			if (other.getValidUntil() != null) {
				return false;
			}
		}
		else if (!getValidUntil().equals(other.getValidUntil())) {
			return false;
		}
		return true;
	}
	
}
