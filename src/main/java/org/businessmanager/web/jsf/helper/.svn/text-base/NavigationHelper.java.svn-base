package ch.vqf.cp.web.jsf.helper;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 * This class contains the names of all pages used in the application.
 * For all navigation actions a getter of this class should be used to determine
 * the navigation target.
 * 
 * @author Christian Ternes
 *
 */
@Component("navigationHelper")
public class NavigationHelper {
	
	@Autowired(required=true)
	private FacesContextHelper facesContext;
	
	private String contextPath;
	private boolean isRedirect = true;
	private boolean isWithoutContext = true;
	
	private static final String HOME							= "/views/home.jsf";
	private static final String ADMIN_HOME 						= "/views/admin/admin.jsf";
	private static final String ADMIN_USER_MANAGEMENT 			= "/views/admin/userManagement.jsf"; 
	private static final String ADMIN_USER_UPDATE 				= "/views/admin/userUpdate.jsf";
	private static final String ADMIN_USER_ASSIGNMENT 			= "/views/admin/userAssignment.jsf";
	private static final String ADMIN_ROLE_MANAGEMENT 			= "/views/admin/roleManagement.jsf";
	private static final String ADMIN_ROLE_UPDATE				= "/views/admin/roleUpdate.jsf";
	private static final String ADMIN_ROLE_ASSIGNMENT			= "/views/admin/roleAssignment.jsf";
	private static final String ADMIN_PERMISSION_MANAGEMENT		= "/views/admin/permissionManagement.jsf";
	private static final String ADMIN_MEMBER_COMMUNITY_MANAGEMENT	= "/views/admin/vqfCommunityManagement.jsf";
	private static final String ADMIN_MEMBER_COMMUNITY_UPDATE	= "/views/admin/vqfCommunityUpdate.jsf";
	private static final String ADMIN_MEMBER_COMMUNITY_ASSIGN 	= "/views/admin/vqfCommunityMemberManagement.jsf";	
	private static final String ADMIN_AUDITOR_MANAGEMENT		= "/views/admin/auditorManagement.jsf";
	private static final String ADMIN_AUDITOR_UPDATE			= "/views/admin/auditorUpdate.jsf";
	private static final String ADMIN_MEMBER_MANAGEMENT			= "/views/admin/vqfMemberManagement.jsf";
	private static final String ADMIN_MEMBER_WISHLIST			= "/views/admin/vqfMemberAuditorManagement.jsf";
	private static final String ADMIN_MEMBER_UPDATE				= "/views/admin/vqfMemberUpdate.jsf";
	private static final String ADMIN_MEMBER_ASSIGNMENT			= "/views/admin/vqfMemberAssignment.jsf";
	private static final String ADMIN_GLOBAL_SETTINGS			= "/views/admin/settingsManagement.jsf";
	private static final String ADD_PERSON						= "/views/add/personAddWizard.jsf";
	private static final String ADD_PERSON_FINISHED				= "/views/add/finishedAddWizard.jsf";
	private static final String FOOTER_LEGAL_NOTICE 			= "/views/footer/legalnotice.jsf";
	private static final String FOOTER_TERMS_OF_USE				= "/views/footer/termsofuse.jsf";
	private static final String FOOTER_CONTACT	 				= "#";
	private static final String SELFDECLARATION_HOME			= "/views/selfdeclaration/selfdeclarationHome.jsf";
	private static final String SELFDECLARATION_OWN				= "/views/selfdeclaration/selfdeclaration.jsf";
	private static final String SELFDECLARATION_ASSIGNED		= "/views/selfdeclaration/assignedSelfdeclaration.jsf";
	private static final String SEMINAR_HOME					= "/views/seminar/seminar.jsf";
	private static final String SEMINAR_LIST					= "/views/seminar/seminarList.jsf";
	private static final String SEMINAR_LIST_BASIC				= "/views/seminar/basicSeminars.jsf";
	private static final String SEMINAR_LIST_ADVANCED			= "/views/seminar/advancedSeminars.jsf";
	private static final String SEMINAR_DETAIL					= "/views/seminar/seminarDetails.jsf";
	private static final String SEMINAR_WAITLIST				= "/views/seminar/seminarWaitList.jsf";
	private static final String SEMINAR_WAITLIST_DETAILS 		= "/views/seminar/seminarWaitListDetails.jsf"; 
	private static final String MUTATION_HOME					= "/views/mutation/mutation.jsf";
	private static final String MUTATION_OPEN_MUTATIONS			= "#";
	private static final String MUTATION_CONTROL				= "#";
	private static final String MUTATION_CREATE		    		= "#";
	private static final String ASSESSMENT_HOME					= "/views/assessments/assessments.jsf";
	private static final String ASSESSMENT_LIST					= "/views/assessments/upcomingAssessmentsList.jsf";
	private static final String ASSESSMENT_APPOINTED			= "/views/assessments/confirmedAssessments.jsf";
	private static final String ASSESSMENT_APPOINTMENT_SCHEDULING	= "/views/assessments/appointmentScheduling.jsf";
	private static final String ASSESSMENT_CONTROLLING			= "#";
	private static final String ASSESSMENT_BUDGET				= "#";
	private static final String ASSESSMENT_SCHEDULE				= "/views/assessments/scheduler.jsf";
	private static final String ASSESSMENT_CURRENT				= "/views/assessments/currentAssessment.jsf";
	private static final String ASSESSMENT_CONFIRMATION			= "/views/assessments/confirmAppointment.jsf";
	private static final String USER_SETTINGS					= "/views/user/settings.jsf";
	private static final String USER_SETTINGS_CHANGE_PWD	= "/views/user/settingsChangePassword.jsf";
	
	private static String logout 					= "/j_spring_security_logout";
	private static String lostPassword 				= "/lostPassword.jsf";

	public String getContextPath() {
		contextPath = facesContext.getCurrentFacesContext().getExternalContext().getRequestContextPath();
		return contextPath;
	}
	
	/**
	 * Retrieves the path to a jsf view. The default behaviour will return the jsf view with the application context as 
	 * prefix e.g. MyApplication/views/admin.jsf.
	 * 
	 * <p/>
	 * 
	 * If {@link NavigationHelper#isRedirect} is set to true, the faces redirect string will be added to the path
	 * e.g. MyApplication/views/admin.jsf?faces-redirect=true
	 * 
	 * <p/>
	 * 
	 * If {@link NavigationHelper#isWithoutContext} is set to true, the application context will be removed from the path
	 * e.g.  /views/admin.jsf
	 * 
	 * <p/>
	 * {@link NavigationHelper#isRedirect}=true and {@link NavigationHelper#isWithoutContext}=true is mostly needed by 
	 * jsf components such as <pre>&lt;h:commandButton&gt;</pre> or <pre>&lt;h:commandLink&gt;</pre> in order to redirect correctly.
	 * 
	 * 
	 * @param relativePath
	 * @return
	 */
	private String getNavigation(String relativePath) {
		String path = relativePath;
		if(isRedirect) {
			path = appendParamInitiator(path);
			path += "faces-redirect=true";
		}
		if(!isWithoutContext) {
			if(contextPath == null) {
				getContextPath();
			}
			path = contextPath + path;
		}

//		isRedirect = false;
//		isWithoutContext = false;
		
		return path;
	}

	private String appendParamInitiator(String path) {
		if(path.contains("?")) {
			return path + "&";
		}
		else {
			return path + "?";
		}
	}
	
	public String getAdminHome() {
		return getNavigation(ADMIN_HOME);
	}
	
	public String getAdminUserManagement() {
		return getNavigation(ADMIN_USER_MANAGEMENT);
	}

	public String getAdminUserUpdate() {
		return getNavigation(ADMIN_USER_UPDATE);
	}

	public String getAdminUserAssignment() {
		return getNavigation(ADMIN_USER_ASSIGNMENT);
	}

	public String getAdminRoleManagement() {
		return getNavigation(ADMIN_ROLE_MANAGEMENT);
	}

	public String getAdminRoleUpdate() {
		return getNavigation(ADMIN_ROLE_UPDATE);
	}

	public String getAdminPermissionManagement() {
		return getNavigation(ADMIN_PERMISSION_MANAGEMENT); 
	}

	@Deprecated
	public boolean isRedirect() {
		return isRedirect;
	}

	@Deprecated
	public void setIsRedirect(boolean isRedirect) {
		this.isRedirect = isRedirect;
	}

	@Deprecated
	public boolean isWithoutContext() {
		return isWithoutContext;
	}

	@Deprecated
	public void setIsWithoutContext(boolean isWithoutContext) {
		this.isWithoutContext = isWithoutContext;
	}
	
	public String getLogout() {
		return getNavigation(logout);
	}

	public String getFooterLegalNotice() {
		return getNavigation(FOOTER_LEGAL_NOTICE);
	}

	public String getFooterTermsOfUse() {
		return getNavigation(FOOTER_TERMS_OF_USE);
	}

	public String getFooterContact() {
		return getNavigation(FOOTER_CONTACT);
	}
	
	public String getHome() {
		return getNavigation(HOME);
	}

	public String getSelfdeclarationHome() {
		return getNavigation(SELFDECLARATION_HOME);
	}
	
	public String getSelfdeclaration() {
		return getNavigation(SELFDECLARATION_OWN);
	}
	
	public String getAssignedSelfdeclaration() {
		return getNavigation(SELFDECLARATION_ASSIGNED);
	}

	public String getSeminarHome() {
		return getNavigation(SEMINAR_HOME);
	}

	public String getMutationHome() {
		return getNavigation(MUTATION_HOME);
	}

	public String getAssessmentHome() {
		return getNavigation(ASSESSMENT_HOME);
	}

	public String getAssessmentList() {
		return getNavigation(ASSESSMENT_LIST);
	}

	public String getAssessmentAppointed() {
		return getNavigation(ASSESSMENT_APPOINTED);
	}

	public String getAssessmentAppointmentScheduling() {
		return getNavigation(ASSESSMENT_APPOINTMENT_SCHEDULING);
	}

	public String getAssessmentControlling() {
		return getNavigation(ASSESSMENT_CONTROLLING);
	}

	public String getAssessmentBudget() {
		return getNavigation(ASSESSMENT_BUDGET);
	}

	public String getAssessmentSchedule() {
		return getNavigation(ASSESSMENT_SCHEDULE);
	}

	public String getAssessmentCurrentAssessment() {
		return getNavigation(ASSESSMENT_CURRENT);
	}

	public String getSeminarList() {
		return getNavigation(SEMINAR_LIST);
	}

	public String getSeminarWaitlist() {
		return getNavigation(SEMINAR_WAITLIST);
	}

	public String getAdminMemberCommunityManagement() {
		return getNavigation(ADMIN_MEMBER_COMMUNITY_MANAGEMENT);
	}
	
	public String getAdminMemberCommunityUpdate() {
		return getNavigation(ADMIN_MEMBER_COMMUNITY_UPDATE);
	}
	
	public String getAdminMemberCommunityAssign() {
		return getNavigation(ADMIN_MEMBER_COMMUNITY_ASSIGN);
	}

	public String getAdminMemberManagement() {
		return getNavigation(ADMIN_MEMBER_MANAGEMENT);
	}

	public String getMutationOpenMutations() {
		return getNavigation(MUTATION_OPEN_MUTATIONS);
	}

	public String getMutationControl() {
		return getNavigation(MUTATION_CONTROL);
	}

	public String getAssessmentConfirmation() {
		return getNavigation(ASSESSMENT_CONFIRMATION);
	}

	public String getMutationCreate() {
		return getNavigation(MUTATION_CREATE);
	}
	
	public String getLostPassword() {
		return getNavigation(lostPassword);
	}
	
	public String getAdminAuditorManagement() {
		return getNavigation(ADMIN_AUDITOR_MANAGEMENT);
	}
	
	public String getAdminAuditorUpdate() {
		return getNavigation(ADMIN_AUDITOR_UPDATE);
	}
	
	public String getUserSettings() {
		return getNavigation(USER_SETTINGS);
	}
	
	public String getUserSettingsChangePassword() {
		return getNavigation(USER_SETTINGS_CHANGE_PWD);
	}

	public String getAdminGlobalSettings() {
		return getNavigation(ADMIN_GLOBAL_SETTINGS);
	}

	public String getAdminMemberUpdate() {
		return getNavigation(ADMIN_MEMBER_UPDATE);
	}

	public String getAdminMemberWishlist() {
		return getNavigation(ADMIN_MEMBER_WISHLIST);
	}
	
	public String getSeminarDetail() {
		return getNavigation(SEMINAR_DETAIL);
	}

	public String getSeminarWaitlistDetails() {
		return getNavigation(SEMINAR_WAITLIST_DETAILS);
	}

	public String getSeminarListBasic() {
		return getNavigation(SEMINAR_LIST_BASIC);
	}

	public String getSeminarListAdvanced() {
		return getNavigation(SEMINAR_LIST_ADVANCED);
	}

	public String getAddPerson() {
		return getNavigation(ADD_PERSON);
	}

	public String getAdminRoleAssignment() {
		return getNavigation(ADMIN_ROLE_ASSIGNMENT);
	}

	public String getAdminMemberAssignment() {
		return getNavigation(ADMIN_MEMBER_ASSIGNMENT);
	}

	public String getAddPersonFinished() {
		return getNavigation(ADD_PERSON_FINISHED);
	}
}
